// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;
using Prohod.Domain.Users;
using Prohod.Domain.VisitRequests;
using Prohod.Infrastructure.Database;

#nullable disable

namespace Prohod.Infrastructure.Migrations
{
    [DbContext(typeof(PostgresDbContext))]
    [Migration("20230604103542_Initial")]
    partial class Initial
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "7.0.5")
                .HasAnnotation("Proxies:ChangeTracking", false)
                .HasAnnotation("Proxies:CheckEquality", false)
                .HasAnnotation("Proxies:LazyLoading", true)
                .HasAnnotation("Relational:MaxIdentifierLength", 63);

            NpgsqlModelBuilderExtensions.HasPostgresEnum(modelBuilder, "role", new[] { "user", "security", "admin" });
            NpgsqlModelBuilderExtensions.HasPostgresEnum(modelBuilder, "visit_request_status", new[] { "not_processed", "reject", "accept" });
            NpgsqlModelBuilderExtensions.UseIdentityByDefaultColumns(modelBuilder);

            modelBuilder.Entity("Prohod.Domain.Forms.Form", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<string>("EmailToSendReply")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<Guid>("UserToVisitId")
                        .HasColumnType("uuid");

                    b.Property<string>("VisitReason")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<DateTime>("VisitTime")
                        .HasColumnType("timestamp with time zone");

                    b.HasKey("Id");

                    b.HasIndex("UserToVisitId");

                    b.ToTable("Forms");
                });

            modelBuilder.Entity("Prohod.Domain.Users.User", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<Role>("Role")
                        .HasColumnType("role");

                    b.Property<string>("Surname")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("UserEmail")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.ToTable("Users");
                });

            modelBuilder.Entity("Prohod.Domain.VisitRequests.VisitRequest", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<Guid>("FormId")
                        .HasColumnType("uuid");

                    b.Property<string>("RejectionReason")
                        .HasColumnType("text");

                    b.Property<VisitRequestStatus>("Status")
                        .HasColumnType("visit_request_status");

                    b.Property<Guid?>("WhoProcessedId")
                        .HasColumnType("uuid");

                    b.HasKey("Id");

                    b.HasIndex("FormId")
                        .IsUnique();

                    b.HasIndex("WhoProcessedId");

                    b.ToTable("VisitRequests");
                });

            modelBuilder.Entity("Prohod.Infrastructure.Accounts.Models.Account", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<Guid>("AssociatedUserId")
                        .HasColumnType("uuid");

                    b.Property<string>("Login")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("PasswordHash")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.HasIndex("AssociatedUserId")
                        .IsUnique();

                    b.HasIndex("Login")
                        .IsUnique();

                    b.ToTable("Accounts");
                });

            modelBuilder.Entity("Prohod.Domain.Forms.Form", b =>
                {
                    b.HasOne("Prohod.Domain.Users.User", "UserToVisit")
                        .WithMany()
                        .HasForeignKey("UserToVisitId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.OwnsOne("Prohod.Domain.Forms.Passport", "Passport", b1 =>
                        {
                            b1.Property<Guid>("FormId")
                                .HasColumnType("uuid");

                            b1.Property<string>("FullName")
                                .IsRequired()
                                .HasColumnType("text");

                            b1.Property<DateTime>("IssueDate")
                                .HasColumnType("timestamp with time zone");

                            b1.Property<string>("Number")
                                .IsRequired()
                                .HasColumnType("text");

                            b1.Property<string>("Series")
                                .IsRequired()
                                .HasColumnType("text");

                            b1.Property<string>("WhoIssued")
                                .IsRequired()
                                .HasColumnType("text");

                            b1.HasKey("FormId");

                            b1.ToTable("Forms");

                            b1.WithOwner()
                                .HasForeignKey("FormId");
                        });

                    b.Navigation("Passport")
                        .IsRequired();

                    b.Navigation("UserToVisit");
                });

            modelBuilder.Entity("Prohod.Domain.VisitRequests.VisitRequest", b =>
                {
                    b.HasOne("Prohod.Domain.Forms.Form", "Form")
                        .WithMany()
                        .HasForeignKey("FormId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Prohod.Domain.Users.User", "WhoProcessed")
                        .WithMany()
                        .HasForeignKey("WhoProcessedId");

                    b.Navigation("Form");

                    b.Navigation("WhoProcessed");
                });

            modelBuilder.Entity("Prohod.Infrastructure.Accounts.Models.Account", b =>
                {
                    b.HasOne("Prohod.Domain.Users.User", "AssociatedUser")
                        .WithMany()
                        .HasForeignKey("AssociatedUserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("AssociatedUser");
                });
#pragma warning restore 612, 618
        }
    }
}
